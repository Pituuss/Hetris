module GameLogic
  ( simpleFalling
  ) where

import Graphics.Gloss.Data.ViewPort
import State
import Blocks

simpleFalling :: ViewPort -> Float -> State -> State
simpleFalling _ = moveBlock

moveBlock :: Float -> State -> State
moveBlock seconds state = if (isNotColision state) then state {blockPos = (x, y')} else loadNewState state
  where
    (x, y) = blockPos state
    y' = y + 1

isNotColision :: State -> Bool
isNotColision state = if bottomWallColision (blockCoordList state) then False else True

bottomWallColision :: [(Float,Float)] -> Bool
bottomWallColision [] = False
bottomWallColision (x:xs) = result || bottomWallColision xs
    where
      result = if (\(a,b) -> b) x > 22 then True else False

loadNewState :: State -> State
loadNewState state = state






blockCoordList :: State -> [(Float,Float)]
blockCoordList state = listConvert (blockList (block state)) state
      
listConvert :: [(Float,Float)] -> State -> [(Float,Float)]
listConvert [] _ = []
listConvert x state = [convert (head x) (blockPos state)] ++ listConvert (tail x) state
  
convert :: (Float,Float) -> (Float,Float) -> (Float,Float)
convert (a1,b1) (a2,b2) = (a1 + a2,b1 + b2)